a2[1,"L_sordidum"] == 0
require(nlme)
require(MuMIn)
source("main_FD_ntw_calc_revised.R")
sizes <- lapply(ntw, length)
pol.rev %>% split(., .$farm) -> pol.rev
pol.rev <- lapply(1:21, function(i){
x <- pol.rev[[i]]
x$size <- rep(sizes[[i]], dim(x)[1])
return(x)
})
pol.rev <- do.call(rbind, pol.rev)
plant.rev %>% split(., .$farm) -> plant.rev
plant.rev <- lapply(1:21, function(i){
x <- plant.rev[[i]]
x$size <- rep(sizes[[i]], dim(x)[1])
return(x)
})
plant.rev <- do.call(rbind, plant.rev)
mumin.proc <- function(model){
ms <- dredge(model, rank="AICc", REML=F)
msList <- get.models(ms, subset = delta < 2, method="REML")
if (length(msList)>1){
output <- list(ms=ms, avg = summary(model.avg(msList)))
}else{
output <- ms
}
return(output)
}
summary(pol.bin.orig.ND<-lme(normalised.degree ~  orig* size + orig*abundance, random=~1|farm, na.action=na.fail, data=pol.rev, method="REML"))
mumin.proc(pol.bin.orig.ND)
# weighted
summary(pol.W.orig.ND<-lme(normalised.degree ~  w.orig* size + abundance*w.orig, random=~1|farm, na.action=na.fail, data=pol.rev, method="REML"))
mumin.proc(pol.W.orig.ND)
require(nlme)
require(MuMIn)
source("main_FD_ntw_calc_revised.R")
zes <- lapply(ntw, length)
pol.rev %>% split(., .$farm) -> pol.rev
pol.rev <- lapply(1:21, function(i){
x <- pol.rev[[i]]
x$size <- rep(sizes[[i]], dim(x)[1])
return(x)
})
pol.rev <- do.call(rbind, pol.rev)
plant.rev %>% split(., .$farm) -> plant.rev
plant.rev <- lapply(1:21, function(i){
x <- plant.rev[[i]]
x$size <- rep(sizes[[i]], dim(x)[1])
return(x)
})
plant.rev <- do.call(rbind, plant.rev)
mumin.proc <- function(model){
ms <- dredge(model, rank="AICc", REML=F)
msList <- get.models(ms, subset = delta < 2, method="REML")
if (length(msList)>1){
output <- list(ms=ms, avg = summary(model.avg(msList)))
}else{
output <- ms
}
return(output)
}
sizes <- lapply(ntw, length)
pol.rev %>% split(., .$farm) -> pol.rev
pol.rev <- lapply(1:21, function(i){
x <- pol.rev[[i]]
x$size <- rep(sizes[[i]], dim(x)[1])
return(x)
})
pol.rev <- do.call(rbind, pol.rev)
plant.rev %>% split(., .$farm) -> plant.rev
plant.rev <- lapply(1:21, function(i){
x <- plant.rev[[i]]
x$size <- rep(sizes[[i]], dim(x)[1])
return(x)
})
plant.rev <- do.call(rbind, plant.rev)
mumin.proc <- function(model){
ms <- dredge(model, rank="AICc", REML=F)
msList <- get.models(ms, subset = delta < 2, method="REML")
if (length(msList)>1){
output <- list(ms=ms, avg = summary(model.avg(msList)))
}else{
output <- ms
}
return(output)
}
summary(pol.bin.orig.ND<-lme(normalised.degree ~  orig* size + orig*abundance, random=~1|farm, na.action=na.fail, data=pol.rev, method="REML"))
mumin.proc(pol.bin.orig.ND)
# weighted
summary(pol.W.orig.ND<-lme(normalised.degree ~  w.orig* size + abundance*w.orig, random=~1|farm, na.action=na.fail, data=pol.rev, method="REML"))
mumin.proc(pol.W.orig.ND)
summary(pol.bin.orig.hs<-lme( pol.hs ~  orig* size + orig*abundance, random=~1|farm, na.action=na.fail, data=pol.rev, method="REML"))
mumin.proc(pol.bin.orig.hs)
summary(pol.W.orig.ND<-lme(normalised.degree ~  w.orig* size + abundance*w.orig, random=~1|farm, na.action=na.fail, data=pol.rev, method="REML"))
mumin.proc(pol.W.orig.ND)
summary(pol.W.orig.hs<-lme( pol.hs ~  w.orig* size + abundance*w.orig, random=~1|farm, na.action=na.fail, data=pol.rev, method="REML"))
mumin.proc(pol.W.orig.hs)
summary(pol.W.orig.hs<-lme( pol.hs ~ abundance*w.orig, random=~1|farm, na.action=na.fail, data=pol.rev, method="REML"))
summary(uniq.ND<-lme(normalised.degree ~  uniq* size + uniq*abundance, random=~1|farm, na.action=na.fail, data=pol.rev, method="REML"))
mumin.proc(uniq.ND)
summary(uniq.hs<-lme(pol.hs ~  uniq* size + uniq*abundance, random=~1|farm, na.action=na.fail, data=pol.rev, method="REML"))
mumin.proc(uniq.hs)
summary(pol.W.orig.hs<-lme( pol.hs ~  w.orig* size + abundance*w.orig, random=~1|farm, na.action=na.fail, data=pol.rev, method="REML"))
mumin.proc(pol.W.orig.hs)
summary(pol.W.orig.hs<-lme( pol.hs ~ abundance*w.orig, random=~1|farm, na.action=na.fail, data=pol.rev, method="REML"))
summary(pol.W.orig.hs<-lme( pol.hs ~  w.orig* size + abundance*w.orig, random=~1|farm, na.action=na.fail, data=pol.rev, method="REML"))
summary(pol.bin.orig.hs<-lme( pol.hs ~  orig* size + orig*abundance, random=~1|farm, na.action=na.fail, data=pol.rev, method="REML"))
mumin.proc(pol.bin.orig.hs)
